import java.io.IOException;
import java.util.ArrayList;

public class Player {
	private int aces = 0;
	private boolean aceUsed;
	private int twos = 0;
	private boolean twoUsed;
	private int threes = 0;
	private boolean threeUsed;
	private int fours = 0;
	private boolean fourUsed;
	private int fives = 0;
	private boolean fiveUsed;
	private int sixes = 0;
	private boolean sixUsed;
	private int threeOfAKind = 0;
	private boolean TOAKUsed;
	private int fourOfAKind = 0;
	private boolean FOAKUsed;
	private int fullHouse = 0;
	private boolean fullUsed;
	private int smallStraight = 0;
	private boolean smallUsed;
	private int largeStraight = 0;
	private boolean largeUsed;
	private int yahtzee = 0;
	private int timesYahtzeeBeenUsed = 0;
	private int chance = 0;
	private boolean chanceUsed;
	private ArrayList<Dice> dice = new ArrayList<>();
	private String UserName;
	private int turnCounter = 0;

	public static void makeDice(Player turn) {
		Dice one = new Dice();
		turn.dice.add(one);
		Dice two = new Dice();
		turn.dice.add(two);
		Dice three = new Dice();
		turn.dice.add(three);
		Dice four = new Dice();
		turn.dice.add(four);
		Dice five = new Dice();
		turn.dice.add(five);
	}

	public static void rollDice(Player turn) {
		turn.dice.get(0).roll();
		turn.dice.get(1).roll();
		turn.dice.get(2).roll();
		turn.dice.get(3).roll();
		turn.dice.get(4).roll();
	}

	public static int sumOfAllDie(Player turn) {
		int total = 0;
		for (int i = 0; i < turn.dice.size(); i++) {
			total += turn.dice.get(i).getAmountRolled();
		}
		return total;
	}

	public static String getName(Player turn) {
		return turn.UserName;
	}

	public static void setName(Player turn, String name) {
		turn.UserName = name;
	}

	public static int getAces(Player turn) {
		return turn.aces;
	}

	public static void setAces(Player turn) throws IOException {
		int aces = 0;
		if (!isAceUsed(turn)) {
			for (int i = 0; i < turn.dice.size(); i++) {
				if (turn.dice.get(i).getAmountRolled() == 1) {
					aces++;
				}
			}
		} else
			return;
		turn.aces = aces;
		setAceUsed(turn, true);
	}

	public static int getTwos(Player turn) {
		return turn.twos;
	}

	public static void setTwos(Player turn) {
		int twos = 0;
		for (int i = 0; i < turn.dice.size(); i++) {
			if (turn.dice.get(i).getAmountRolled() == 2) {
				twos += 2;
			}
		}
		turn.twos = twos;
	}

	public static int getThrees(Player turn) {
		return turn.threes;
	}

	public static void setThrees(Player turn) {
		int threes = 0;
		for (int i = 0; i < turn.dice.size(); i++) {
			if (turn.dice.get(i).getAmountRolled() == 3) {
				threes += 3;
			}
		}
		turn.threes = threes;
	}

	public static int getFours(Player turn) {
		return turn.fours;
	}

	public static void setFours(Player turn) {
		int fours = 0;
		for (int i = 0; i < turn.dice.size(); i++) {
			if (turn.dice.get(i).getAmountRolled() == 4) {
				fours += 4;
			}
		}
		turn.fours = fours;
	}

	public static int getFives(Player turn) {
		return turn.fives;
	}

	public static void setFives(Player turn) {
		int fives = 0;
		for (int i = 0; i < turn.dice.size(); i++) {
			if (turn.dice.get(i).getAmountRolled() == 5) {
				fives += 5;
			}
		}
		turn.fives = fives;
	}

	public static int getSixes(Player turn) {
		return turn.sixes;
	}

	public static void setSixes(Player turn) {
		int sixes = 0;
		for (int i = 0; i < turn.dice.size(); i++) {
			if (turn.dice.get(i).getAmountRolled() == 6) {
				sixes += 6;
			}
		}
		turn.sixes = sixes;
	}

	public static int getThreeOfAKind(Player turn) {
		return turn.threeOfAKind;
	}

	public static void setThreeOfAKind(Player turn, int ThreeOfAKind) {
		if (!isTOAKUsed(turn)) {
			for (int i = 0; i < turn.dice.size(); i++) {
				if (checkForAkind(turn, i, ThreeOfAKind) >= 3) {
					turn.threeOfAKind = sumOfAllDie(turn);
				}
			}
		} else
			return;
		setTOAKUsed(turn, true);
	}

	public static int getFourOfAKind(Player turn) {
		return turn.fourOfAKind;
	}

	public static void setFourOfAKind(Player turn, int FourOfAKind) {
		if (!isFOAKUsed(turn)) {
			for (int i = 0; i < turn.dice.size(); i++) {
				if (checkForAkind(turn, i, FourOfAKind) >= 4) {
					turn.fourOfAKind = sumOfAllDie(turn);
				}
			}
		}
		setFOAKUsed(turn, true);
	}

	public static int getFullHouse(Player turn) {
		return turn.fullHouse;
	}

	public static void setFullHouse(Player turn) {
		if (!isFullUsed(turn)) {
			boolean halfway = false;
			boolean fullway = false;
			if (checkForAkind(turn, 6, 1) == 2 || checkForAkind(turn, 6, 1) == 3) {
				halfway = true;
			}
			if (checkForAkind(turn, 6, 2) == 2 || checkForAkind(turn, 6, 2) == 3) {
				if (halfway)
					fullway = true;
				else
					halfway = true;
			}
			if (checkForAkind(turn, 6, 3) == 3 || checkForAkind(turn, 6, 3) == 2) {
				if (halfway)
					fullway = true;
				else
					halfway = true;
			}
			if (checkForAkind(turn, 6, 4) == 2 || checkForAkind(turn, 6, 4) == 3) {
				if (halfway)
					fullway = true;
				else
					halfway = true;
			}
			if (checkForAkind(turn, 6, 5) == 2 || checkForAkind(turn, 6, 5) == 3) {
				if (halfway)
					fullway = true;
				else
					halfway = true;
			}
			if (checkForAkind(turn, 6, 6) == 2 || checkForAkind(turn, 6, 6) == 3) {
				if (halfway)
					fullway = true;
				else
					halfway = true;
			}
			if (halfway && fullway)
				turn.fullHouse = sumOfAllDie(turn);
		}
	}

	public static int getSmallStraight(Player turn) {
		return turn.smallStraight;
	}

	public static void setSmallStraight(Player turn, int SmallStraight) {
		turn.smallStraight = SmallStraight;
	}

	public static int getLargeStraight(Player turn) {
		return turn.largeStraight;
	}

	public static void setLargeStraight(Player turn, int LargeStraight) {
		if (!isLargeUsed(turn)) {
			if (checkForAkind(turn, 6, 1) == 1)
				if (checkForAkind(turn, 6, 2) == 1)
					if (checkForAkind(turn, 6, 3) == 1)
						if (checkForAkind(turn, 6, 4) == 1)
							if (checkForAkind(turn, 6, 5) == 1)
								if (checkForAkind(turn, 6, 6) == 1)
									turn.largeStraight = sumOfAllDie(turn);
		}
		setLargeUsed(turn, true);
	}

	public static int getYahtzee(Player turn) {
		return turn.yahtzee;
	}

	public static void setYahtzee(Player turn) {
		if (checkForAkind(turn, 6, turn.dice.get(0).getAmountRolled()) == 6 && turn.timesYahtzeeBeenUsed < 5) {
			turn.yahtzee += 50;
		}
		turn.timesYahtzeeBeenUsed++;
	}

	public static int getTimesYahtzeeBeenUsed(Player turn) {
		return turn.timesYahtzeeBeenUsed;
	}

	public static int getChance(Player turn) {
		return turn.chance;
	}

	public static void setChance(Player turn, int chance) {
		turn.chance = chance;
	}

	public static boolean isAceUsed(Player turn) {
		return turn.aceUsed;
	}

	public static void setAceUsed(Player turn, boolean aceUsed) {
		turn.aceUsed = aceUsed;
	}

	public static boolean isTwoUsed(Player turn) {
		return turn.twoUsed;
	}

	public static void setTwoUsed(Player turn, boolean twoUsed) {
		turn.twoUsed = twoUsed;
	}

	public static boolean isThreeUsed(Player turn) {
		return turn.threeUsed;
	}

	public static void setThreeUsed(Player turn, boolean threeUsed) {
		turn.threeUsed = threeUsed;
	}

	public static boolean isFourUsed(Player turn) {
		return turn.fourUsed;
	}

	public static void setFourUsed(Player turn, boolean fourUsed) {
		turn.fourUsed = fourUsed;
	}

	public static boolean isFiveUsed(Player turn) {
		return turn.fiveUsed;
	}

	public static void setFiveUsed(Player turn, boolean fiveUsed) {
		turn.fiveUsed = fiveUsed;
	}

	public static boolean isSixUsed(Player turn) {
		return turn.sixUsed;
	}

	public static void setSixUsed(Player turn, boolean sixUsed) {
		turn.sixUsed = sixUsed;
	}

	public static boolean isTOAKUsed(Player turn) {
		return turn.TOAKUsed;
	}

	public static void setTOAKUsed(Player turn, boolean TOAXUsed) {
		turn.TOAKUsed = TOAXUsed;
	}

	public static boolean isFOAKUsed(Player turn) {
		return turn.FOAKUsed;
	}

	public static void setFOAKUsed(Player turn, boolean FOAXUsed) {
		turn.FOAKUsed = FOAXUsed;
	}

	public static boolean isFullUsed(Player turn) {
		return turn.fullUsed;
	}

	public static void setFullUsed(Player turn, boolean FullUsed) {
		turn.fullUsed = FullUsed;
	}

	public static boolean isSmallUsed(Player turn) {
		return turn.smallUsed;
	}

	public static void setSmallUsed(Player turn, boolean SmallUsed) {
		turn.smallUsed = SmallUsed;
	}

	public static boolean isLargeUsed(Player turn) {
		return turn.largeUsed;
	}

	public static void setLargeUsed(Player turn, boolean LargeUsed) {
		turn.largeUsed = LargeUsed;
	}

	public static boolean isChanceUsed(Player turn) {
		return turn.chanceUsed;
	}

	public static void setChanceUsed(Player turn, boolean chanceUsed) {
		turn.chanceUsed = chanceUsed;
	}

	public static int checkForAkind(Player turn, int diceSelected, int numberToCompare) {
		int amountTheSame = 0;
		for (int i = 0; i < turn.dice.size(); i++) {
			if (i != diceSelected) {
				if (turn.dice.get(i).getAmountRolled() == numberToCompare) {
					amountTheSame++;
				}
			}
		}
		return amountTheSame;
	}

	public static void incramentTurnCounter(Player turn) {
		turn.turnCounter++;
	}

	public static int getTurnCounter(Player turn) {
		return turn.turnCounter;
	}

	public static int total(Player turn) {
		int total = getAces(turn);
		total += getTwos(turn);
		total += getThrees(turn);
		total += getFours(turn);
		total += getFives(turn);
		total += getSixes(turn);
		if(total > 63)
			total += 35;
		total += getThreeOfAKind(turn);
		total += getFourOfAKind(turn);
		total += getSmallStraight(turn);
		total += getLargeStraight(turn);
		total += getFullHouse(turn);
		total += getYahtzee(turn);
		total += getChance(turn);
		return total;
	}
	
	public static void  playersTurn(Player turn){
		rollDice(turn);
	}
}